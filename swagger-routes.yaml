openapi: 3.0.0
info:
  title: Argent Bank API
  version: 1.0.0
servers:
  - url: http://localhost:3001/api/v1

paths:
  #
  #
  # login route # login route # login route # login route
  # login route # login route # login route # login route
  /user/login:
    post:
      summary: Get token
      description: Send an email and a password and receive a token
      security: []
      # body # body # body # body
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                required: [email, password]
                properties:
                  email:    { type: string }
                  password: { type: string }
      # responses # responses # responses # responses
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: status error
        '500':
          description: status error server
  #
  #
  # profile route # profile route # profile route # profile route
  # profile route # profile route # profile route # profile route
  /user/profile:
    post:
      summary: Get profile user
      description: Get the infos from user if the token is provide
      # header # header # header # header
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT token prefixed with "Bearer"
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      # responses # responses # responses # responses
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:   { type: number }
                  message:  { type: string }
                  body:
                    properties:
                      id:         { type: "string"}
                      email:      { type: "string"}
                      firstName:  { type: "string"}
                      lastName:   { type: "string"}
        '400':
          description: status error
        '500':
          description: status error server
    
    put:
      summary: update profile user
      description: uptdate the infos from user if the token is provide
      # header # header # header # header
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT token prefixed with "Bearer"
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      # body # body # body # body
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                required: [email, password]
                properties:
                  firstName:  { type: string }
                  lastName:   { type: string }
      # responses # responses # responses # responses
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:   { type: number }
                  message:  { type: string }
                  body:
                    properties:
                      id:       { type: "string"}
                      email:    { type: "string"}
                      firstName: { type: "string"}
                      lastName: { type: "string"}
        '400':
          description: status error
        '500':
          description: status error server

  #
  #
  # profile route # profile route # profile route # profile route
  # profile route # profile route # profile route # profile route
  /user/profile/transaction:
    post:
      summary: get transactions in month
      description: get transactions in month if the token is provide
      # header # header # header # header
      parameters:
          - name: Authorization
            in: header
            required: true
            description: JWT token prefixed with "Bearer"
            schema:
              type: string
              example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      # responses # responses # responses # responses
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:               { type: string }
                  date:             { type: string }
                  description:      { type: string }
                  amount:           { type: number }
                  balance:          { type: number }
        '400':
          description: status error
        '500':
          description: status error server
  #
  #
  # profile route # profile route # profile route # profile route
  # profile route # profile route # profile route # profile route   
  /user/profile/transaction/{ID_transaction}:
    post:
      summary: "get transaction details"
      description: "Get transaction details if the token is provide"
      # header # header # header # header
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT token prefixed with "Bearer"
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: "ID_transaction"
          in: "path"
          required: true
          description: "ID transaction"
          schema:
            type: string
            example: 68UzI1dde684pXVCJ92fOiJI
      # responses # responses # responses # responses      
      responses:
        '200':
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:               { type: string }
                  date:             { type: string }
                  description:      { type: string }
                  amount:           { type: number }
                  balance:          { type: number }
                  transactionType:  { type: string }
                  category:         { type: string }
                  notes:            { type: string }
        '400':
          description: status error
        '500':
          description: status error server
        
    put:
      summary: "update transaction details"
      description: "update transaction details if the token is provide"
      # header # header # header # header
      parameters:
        - name: Authorization
          in: header
          required: true
          description: JWT token prefixed with "Bearer"
          schema:
            type: string
            example: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        - name: "ID_transaction"
          in: "path"
          required: true
          description: "ID transaction"
          schema:
            type: string
            example: 68UzI1dde684pXVCJ92fOiJI
      # body # body # body # body
      requestBody:
        required: true
        content:
          application/json:
              schema:
                type: object
                required: [transactionType, category, notes]
                properties:
                  category:         { type: string }
                  notes:            { type: string }
      # body # body # body # body
      responses:
        '200': 
          description: status ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:               { type: string }
                  date:             { type: string }
                  description:      { type: string }
                  amount:           { type: number }
                  balance:          { type: number }
                  transactionType:  { type: string }
                  category:         { type: string }
                  notes:            { type: string }
        '400':
          description: status error
        '500': 
          description: status error server
            
  
